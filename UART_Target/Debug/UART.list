
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00001390  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00001390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000390  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00001388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800038c  0800038c  0000138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000390  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000390  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000479  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ab  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000019e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004c  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc65  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a4e  00000000  00000000  0000f711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f758  00000000  00000000  0001015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005f8b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d8  00000000  00000000  0005f8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0005f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000370 	.word	0x08000370

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000370 	.word	0x08000370

080001d8 <main>:
#include "uart.h"

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	//Enable clock on both buses of GPIOA and USART2
    //Calibrate Moder and Alternate functions of GPIOA
    //Configure USART2 data registers, BRR(baud rate) and SR(status register)and CR1(control register to enable)
	uart2_tx_init();
 80001dc:	f000 f804 	bl	80001e8 <uart2_tx_init>

	while(1){
		uart2_write('A');
 80001e0:	2041      	movs	r0, #65	@ 0x41
 80001e2:	f000 f85f 	bl	80002a4 <uart2_write>
 80001e6:	e7fb      	b.n	80001e0 <main+0x8>

080001e8 <uart2_tx_init>:
uint32_t *USART2_DR = (uint32_t*)0x40004404;
uint32_t *USART2_BRR = (uint32_t*)0x40004408;
uint32_t *USART2_CR1 = (uint32_t*)0x4000440C;*/

void uart2_tx_init(void)
{
 80001e8:	b598      	push	{r3, r4, r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	//Enabling Clock access to GPIOA
	//*portAHB1ENR|=GPIOAEN; //enables GPIOAEN in RCC
	RCC->AHB1ENR |= GPIOAEN; //alternate with usage of header for above
 80001ec:	4b20      	ldr	r3, [pc, #128]	@ (8000270 <uart2_tx_init+0x88>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000270 <uart2_tx_init+0x88>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6313      	str	r3, [r2, #48]	@ 0x30

	//SET GPIOA - PA2 Mode to Alternate Function mode
	//*GPIOA_MODER&=~(1U<<4); //sets 0 at MODER pos 4 for PA2
	//*GPIOA_MODER|=(1U<<5); //sets 1 at MODER pos 5 for PA
	GPIOA->MODER &=	~(1U<<4);
 80001f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000274 <uart2_tx_init+0x8c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000274 <uart2_tx_init+0x8c>)
 80001fe:	f023 0310 	bic.w	r3, r3, #16
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000204:	4b1b      	ldr	r3, [pc, #108]	@ (8000274 <uart2_tx_init+0x8c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1a      	ldr	r2, [pc, #104]	@ (8000274 <uart2_tx_init+0x8c>)
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	6013      	str	r3, [r2, #0]
	//SET GPIOA - PA2 Alternate function type to be USART_TX(AF07)
	//*GPIOA_AFRL|=(1U<<8); //sets PA2 alternate function type to UART_TX(AF07(0111 at PA2) - function type as per data sheet)
	//*GPIOA_AFRL|=(1U<<9); //sets PA2 alternate function type to UART_TX(AF07(0111 at PA2) - function type as per data sheet)
	//*GPIOA_AFRL|=(1U<<10); //sets PA2 alternate function type to UART_TX(AF07(0111 at PA2) - function type as per data sheet)
	//*GPIOA_AFRL&=~(1U<<11); //sets PA2 alternate function type to UART_TX(AF07(0111 at PA2) - function type as per data sheet)
	GPIOA->AFR[0] |= (1U<<8);
 8000210:	4b18      	ldr	r3, [pc, #96]	@ (8000274 <uart2_tx_init+0x8c>)
 8000212:	6a1b      	ldr	r3, [r3, #32]
 8000214:	4a17      	ldr	r2, [pc, #92]	@ (8000274 <uart2_tx_init+0x8c>)
 8000216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800021a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 800021c:	4b15      	ldr	r3, [pc, #84]	@ (8000274 <uart2_tx_init+0x8c>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	4a14      	ldr	r2, [pc, #80]	@ (8000274 <uart2_tx_init+0x8c>)
 8000222:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000226:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000228:	4b12      	ldr	r3, [pc, #72]	@ (8000274 <uart2_tx_init+0x8c>)
 800022a:	6a1b      	ldr	r3, [r3, #32]
 800022c:	4a11      	ldr	r2, [pc, #68]	@ (8000274 <uart2_tx_init+0x8c>)
 800022e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000232:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000234:	4b0f      	ldr	r3, [pc, #60]	@ (8000274 <uart2_tx_init+0x8c>)
 8000236:	6a1b      	ldr	r3, [r3, #32]
 8000238:	4a0e      	ldr	r2, [pc, #56]	@ (8000274 <uart2_tx_init+0x8c>)
 800023a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800023e:	6213      	str	r3, [r2, #32]

	//Configure USART CLOCK Access
	//*portAPB1ENR|=UART2EN; //17 is the bit pos of USART2 in APB1ENR RCC to enable USART2 clk access
	RCC->APB1ENR=UART2EN;
 8000240:	4b0b      	ldr	r3, [pc, #44]	@ (8000270 <uart2_tx_init+0x88>)
 8000242:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000246:	641a      	str	r2, [r3, #64]	@ 0x40

	//Configure Baudrate
	//*USART2_BRR=compute_USART_BRR(APB1_CLK, UART_BAUDRATE); //formula to compute BRR of USART2
	USART2->BRR=compute_USART_BRR(APB1_CLK, UART_BAUDRATE);
 8000248:	4c0b      	ldr	r4, [pc, #44]	@ (8000278 <uart2_tx_init+0x90>)
 800024a:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 800024e:	480b      	ldr	r0, [pc, #44]	@ (800027c <uart2_tx_init+0x94>)
 8000250:	f000 f816 	bl	8000280 <compute_USART_BRR>
 8000254:	4603      	mov	r3, r0
 8000256:	60a3      	str	r3, [r4, #8]

	//Configure transfer direction in CR1(control register1)(TE(transmit for PA2) - Bit 3)
	//*USART2_CR1=0x0008;
	USART2->CR1=CR1_TE;
 8000258:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <uart2_tx_init+0x90>)
 800025a:	2208      	movs	r2, #8
 800025c:	60da      	str	r2, [r3, #12]

	//Also enable USART enable bit 13 in CR1
	//*USART2_CR1|=0x2000;
	USART2->CR1|=CR1_UE;
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <uart2_tx_init+0x90>)
 8000260:	68db      	ldr	r3, [r3, #12]
 8000262:	4a05      	ldr	r2, [pc, #20]	@ (8000278 <uart2_tx_init+0x90>)
 8000264:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000268:	60d3      	str	r3, [r2, #12]
}
 800026a:	bf00      	nop
 800026c:	bd98      	pop	{r3, r4, r7, pc}
 800026e:	bf00      	nop
 8000270:	40023800 	.word	0x40023800
 8000274:	40020000 	.word	0x40020000
 8000278:	40004400 	.word	0x40004400
 800027c:	00f42400 	.word	0x00f42400

08000280 <compute_USART_BRR>:

uint32_t compute_USART_BRR(uint32_t PeripheralCLK, uint32_t Baudrate)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
	return ((PeripheralCLK+(Baudrate/2U))/Baudrate);
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	085a      	lsrs	r2, r3, #1
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	441a      	add	r2, r3
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000298:	4618      	mov	r0, r3
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <uart2_write>:




void uart2_write(int ch){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	//check whether USART2_SR is empty, if its not empty then we can wirte to data register this is done by checking whether ORE(overrun) is 1 or not
	while(!(USART2->SR&SR_TXE)){
 80002ac:	e003      	b.n	80002b6 <uart2_write+0x12>
		USART2->DR = (ch&0xFF);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a07      	ldr	r2, [pc, #28]	@ (80002d0 <uart2_write+0x2c>)
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR&SR_TXE)){
 80002b6:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <uart2_write+0x2c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f5      	beq.n	80002ae <uart2_write+0xa>

	// another way to check whether to send data to DR
	/* while(!(*USART_SR&0x0080)){}
	 * this will ensure that data gets sent when DR is empty
	 */
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40004400 	.word	0x40004400

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	@ (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	@ (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	@ (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	@ (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ff67 	bl	80001d8 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	2000001c 	.word	0x2000001c

08000324 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4d0d      	ldr	r5, [pc, #52]	@ (8000360 <__libc_init_array+0x38>)
 800032c:	4c0d      	ldr	r4, [pc, #52]	@ (8000364 <__libc_init_array+0x3c>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	2600      	movs	r6, #0
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	4d0b      	ldr	r5, [pc, #44]	@ (8000368 <__libc_init_array+0x40>)
 800033a:	4c0c      	ldr	r4, [pc, #48]	@ (800036c <__libc_init_array+0x44>)
 800033c:	f000 f818 	bl	8000370 <_init>
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	2600      	movs	r6, #0
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
